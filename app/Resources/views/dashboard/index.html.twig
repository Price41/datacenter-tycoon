{% extends 'base.html.twig' %}

{% block body %}
<div id="errormsgbox" class="alert alert-danger alert-dismissible fade in" role="alert" style="display: none;">
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
    <strong>Error: </strong> Could not connect to the WebSocket server !
</div>
<h1>Dashboard</h1>
<p>Date : <span id="date"></span></p>
<p>
    Welcome <strong>{{ app.user.username }}</strong> !<br/>
    Name of your company : {{ app.user.companyName }}<br/>
    Balance : <span id="balance">{{ app.user.balance }}</span> â‚¬<br/>
    Research rank : {{ app.user.researchRank }}
</p>
{% for datacenter in datacenters %}
<h2>Datacenter</h2>
<p>
    Type : {{ datacenter.typeDatacenter.name }} (max rack number : {{ datacenter.typeDatacenter.maxRack }})<br/>
    Max power : {{ datacenter.typeElectricity.power }} W<br/>
    Power usage : <span id="datacenter{{ datacenter.id }}_powerUsage">0</span> W<br/>
    Power used : <span id="datacenter{{ datacenter.id }}_kwh"></span> kWh<br/>
    Internet speed : {{ datacenter.typeInternet.speed }} Mbps<br/>
    Internet bandwidth usage : <span id="datacenter{{ datacenter.id }}_wanUsage">0</span> Mbps
</p>
<div id="datacenter{{ datacenter.id }}_powerGauge" class="gauge"></div>
<div id="datacenter{{ datacenter.id }}_wanGauge" class="gauge"></div>

{% for rack in datacenter.racks %}
<div class="row">
<div class="col-md-6">
    <h3>Rack</h3>
    {% for server in rack.servers %}
    <h4>Server</h4>
    <p>
        CPU usage : {{ server.usageCpu }} MHz<br/>
        RAM usage : {{ server.usageRam }} MB<br/>
        HDD usage : {{ server.usageHdd }} GB<br/>
        LAN usage : {{ server.usageLan }} Mbps<br/>
        WAN usage : <span id="server{{ server.id }}_wanUsage">{{ server.usageWan }}</span> Mbps<br/>
        Power consumption : <span id="server{{ server.id }}_power">0</span> W
    </p>
    {% endfor %}
</div>
<div class="col-md-6">
    <canvas id="rack{{ rack.id }}" width="220" height="600"></canvas>
</div>
</div>
{% endfor %}
{% endfor %}

{% endblock %}

{% block javascripts %}
<script src="{{ asset('js/raphael-2.1.4.min.js') }}"></script>
<script src="{{ asset('js/justgage.js') }}"></script>

{{ ws_client() }}

<script type="text/javascript">
var gauges = [];

{% for datacenter in datacenters %}
gauges[{{ datacenter.id }}] = [];
gauges[{{ datacenter.id }}]['power'] = new JustGage({
    id: "datacenter{{ datacenter.id }}_powerGauge",
    value: 0,
    min: 0,
    max: {{ datacenter.typeElectricity.power }},
    title: "Power usage",
    formatNumber: true
});
gauges[{{ datacenter.id }}]['wan'] = new JustGage({
    id: "datacenter{{ datacenter.id }}_wanGauge",
    value: 0,
    min: 0,
    max: {{ datacenter.typeInternet.speed }},
    title: "Internet usage",
    formatNumber: true,
    decimals: 1
});
{% endfor %}


var webSocket = WS.connect("ws://{{ ws_server_ip }}:{{ ws_server_port }}");

webSocket.on("socket/connect", function(session){
    console.log("Successfully Connected!");

    session.subscribe("player/channel/{{ app.user.id }}", function(uri, payload){
        console.log(payload);
        var data = JSON.parse(payload);

        document.getElementById("date").innerHTML = data.date;
        document.getElementById("balance").innerHTML = data.balance;

        for (var dcKey in data.datacenters) {
            document.getElementById("datacenter"+dcKey+"_powerUsage").innerHTML = data.datacenters[dcKey].power_usage;
            document.getElementById("datacenter"+dcKey+"_kwh").innerHTML = data.datacenters[dcKey].kwh;
            document.getElementById("datacenter"+dcKey+"_wanUsage").innerHTML = data.datacenters[dcKey].wan_usage;
            gauges[dcKey]['power'].refresh(data.datacenters[dcKey].power_usage);
            gauges[dcKey]['wan'].refresh(data.datacenters[dcKey].wan_usage);
            for(var rackKey in data.datacenters[dcKey].racks) {
                for (var srvKey in data.datacenters[dcKey].racks[rackKey].servers) {
                    document.getElementById("server"+srvKey+"_power").innerHTML = data.datacenters[dcKey].racks[rackKey].servers[srvKey].power;
                    document.getElementById("server"+srvKey+"_wanUsage").innerHTML = data.datacenters[dcKey].racks[rackKey].servers[srvKey].wan_usage;
                }
            }
        }
        drawRack(data);
    });
})

webSocket.on("socket/disconnect", function(error){
    console.log("Disconnected for " + error.reason + " with code " + error.code);
    document.getElementById("errormsgbox").style.display = "block";
    window.setTimeout(function() { $("#errormsgbox").alert('close'); }, 5000);
})

var rackLoaded = false;
var rack = new Image();
rack.src = '{{ asset('img/rack.png') }}';
rack.onload = function(){
    rackLoaded = true;
}

var serverLoaded = false;
var server = new Image();
server.src = '{{ asset('img/server.png') }}'
server.onload = function(){
    serverLoaded = true;
}

function drawRack(data) {
    if(rackLoaded && serverLoaded) {
        for (var dcKey in data.datacenters) {
            for(var rackKey in data.datacenters[dcKey].racks) {
                var ctx = document.getElementById('rack'+rackKey).getContext('2d');
                ctx.drawImage(rack, 0, 0);
                var nbServers = 0;
                for (var srvKey in data.datacenters[dcKey].racks[rackKey].servers) {
                    nbServers++;
                }
                for(i = 0; i < nbServers; i++) {
                    ctx.drawImage(server, 32, 528 - 12 * i, 155, 12);
                }
            }
        }
    }
}


</script>
{% endblock %}
